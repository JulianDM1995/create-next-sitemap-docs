import { getFileContent } from './fileUtils.js'

export function generateHTMLContent(formattedPaths, svgContent, pageTitle) {
  let textToCopy = ''
  let accordionSections = ''

  formattedPaths.forEach((route) => {
    const { path: routePath, fullPath, type } = route

    const fileContent = getFileContent(fullPath)

    textToCopy += `<h3>${routePath}</h3><p>${fileContent}</p><br>`

    accordionSections += `
      <div class="accordion" id="${routePath.replace(/\/|\\/g, '_')}">
        <div class="accordion-header">${routePath}</div>
        <div class="format">
          <span>${type}</span>
          <svg class="chevron" viewBox="0 0 24 24"><path d="M7 10l5 5 5-5z"/></svg>
        </div>
      </div>
      <pre class="panel">${fileContent}</pre>
    `
  })

  return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${pageTitle}</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
            .container { width: 80%; margin: 0 auto; padding: 20px; }
            pre { background: #f4f4f4; padding: 10px; border: 1px solid #ddd; border-radius: 5px; overflow-x: auto; margin-bottom: 40px; }
            svg.sitemap { display: block; margin: 20px auto; }
            .title { text-align: center; color: #333; font-size: 2rem; }
            .subtitle-container { display: flex; justify-content: space-between; align-items: center; }
            .subtitle { color: #333; margin-right: 10px; font-size: 2rem; }
            .format { display: flex; align-items: center; }
            .accordion { background: #fff; padding: 10px; display: flex; justify-content: space-between; align-items: center; cursor: pointer; border: 1px solid #ddd; border-radius: 5px; margin: 5px 0; }
            .accordion:hover { background: #f0f0f0; }
            .accordion-header { margin: 0 }
            .chevron { width: 24px; height: 24px; transition: transform 0.3s ease; }
            .accordion.active .chevron { transform: rotate(180deg); }
            .panel { display: none; overflow: hidden; transition: max-height 0.2s ease-out; }
            .spacer { height: 80px; }
            .button { display: inline-block; padding: 10px 20px; margin: 10px 0; font-size: 16px; cursor: pointer; background-color: #007BFF; color: white; border: none; border-radius: 5px; }
            .button:hover { background-color: #0056b3; }
            footer { text-align: center; margin-top: 40px; font-size: 14px; color: #777; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="title">${pageTitle}</div>
            <div style="margin-bottom: 40px;"></div>
            <div class="subtitle-container">
                <div class="subtitle">Sitemap</div>
                <button class="button" onclick="downloadPNG()">Download PNG</button>
            </div>
            ${svgContent}
            <div class="spacer"></div>
            <div class="subtitle-container">
                <div class="subtitle">Routes</div>
                <button class="button" onclick="copyRoutes()">Copy Routes</button>
                <div id="routesText" style="display:none;">${textToCopy}</div>
            </div>
            ${accordionSections}
        </div>
        <footer>Generated by <a href="https://www.condor.com.co" target="_blank">Condor Digital Solutions</a></footer>
        <script>
            function downloadPNG() {
                const svg = document.querySelector('svg.sitemap');
                const serializer = new XMLSerializer();
                const source = serializer.serializeToString(svg);
                convertSVGToPNG(source, (url) => {
                    const a = document.createElement('a');
                    a.href = url;
                    const fileName = \`\${'${pageTitle}'.replace(/\\s+/g, '_')}-sitemap.png\`;
                    a.download = fileName;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                });
            }
    
            function convertSVGToPNG(svgContent, callback) {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
    
                img.onload = () => {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    canvas.toBlob((blob) => {
                        const url = URL.createObjectURL(blob);
                        callback(url);
                    });
                };
    
                img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgContent)));
            }
    
            function copyRoutes() {
                const routesText = document.getElementById('routesText').innerHTML;
                const blob = new Blob([routesText], { type: 'text/html' });
                const data = [new ClipboardItem({ 'text/html': blob })];
                navigator.clipboard.write(data).then(() => {
                    console.log('Routes copied to clipboard!');
                });
            }
    
            document.addEventListener('DOMContentLoaded', () => {
                const accordions = document.getElementsByClassName('accordion');
                for (let i = 0; i < accordions.length; i++) {
                    accordions[i].addEventListener('click', function() {
                        this.classList.toggle('active');
                        const panel = this.nextElementSibling;
                        if (panel.style.display === 'block') {
                            panel.style.display = 'none';
                        } else {
                            panel.style.display = 'block';
                        }
                    });
                }
            });
        </script>
    </body>
    </html>
  `
}
